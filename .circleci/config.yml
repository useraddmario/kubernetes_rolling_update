version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
jobs:
  lint:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 
  create-cluster:
    docker:
      - image: cimg/python:3.9.5
    steps:
      - checkout
      - run:
          name: Check for existing cluster
          command: |
            apt update && apt -y install curl unzip wget
            # Install awscli
            wget -q https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
            sudo unzip awscli-exe-linux-x86_64.zip
            sudo ./aws/install
            # Install eksctl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            # Install kubectl
            wget https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
            sudo chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin
            # Test installs
            aws s3 ls
            # Check for existing cluster
            cluster=$(aws eks list-clusters --output text | awk '{print $2}')
            pwd
            ls -lah
            if [ "$cluster" == "" ]; then
              eksctl create cluster -f deploy/cluster.yaml
              aws eks update-kubeconfig --name $cluster
            else
              echo "test"
              exit 0
            fi
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          show-kubectl-command: true
          resource-file-path: deploy/sample-deployment.yaml
          resource-name: deployment/sample-webapp
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          show-kubectl-command: true
          resource-file-path: deploy/sample-service.yaml
          resource-name: service/sample-webapp


workflows:
  build_deploy_update:
    jobs:
      - lint
      - aws-ecr/build-and-push-image:
          name: build-and-push
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_DEFAULT_REGION 
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          context: aws
          create-repo: true
          dockerfile: Dockerfile
          no-output-timeout: 10m
          path: ~/project
          repo: capstone
          skip-when-tags-exist: false
          tag: ${CIRCLE_SHA1},latest
          requires:
            - lint
#      - aws-eks/create-cluster:
#          cluster-name: capstone-cluster
#          show-eksctl-command: true
#          context: aws
#          requires:
#            - build-and-push
      - create-cluster:
          requires:
            - build-and-push
          context: aws
      - create-deployment:
          cluster-name: capstone-cluster
          requires:
            - create-cluster
          context: aws
      #- aws-eks/delete-cluster:
          #cluster-name: capstone-cluster
          #requires:
          #  - deploy-to-cluster
          #context: aws
